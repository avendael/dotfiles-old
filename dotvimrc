" Include NeoBundle in runtime path and initialize
if has('vim_starting')
    set nocompatible

    " Required:
    set rtp+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

" Le Plugins
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'gmarik/Vundle.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tomasr/molokai'
NeoBundle 'sickill/vim-monokai'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'mustache/vim-mustache-handlebars'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'bling/vim-airline'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
NeoBundle 'editorconfig/editorconfig-vim'
NeoBundle 'jmcantrell/vim-virtualenv'
NeoBundle 'rking/ag.vim'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'jpalardy/vim-slime'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'
NeoBundle 'ervandew/supertab'
NeoBundle 'mattn/emmet-vim'
NeoBundle 'christoomey/vim-tmux-navigator'
NeoBundle 'jamessan/vim-gnupg'
NeoBundle 'Shougo/vimproc.vim', {
      \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'tsukkee/unite-tag'

call neobundle#end()

" *init* "

let g:mapleader=" "

" *filetypes* "

filetype plugin indent on
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby
au FileType c,cpp,java,php,python,ruby,html,coffee,mustache,sass,css,conf,haskell,zsh autocmd BufWritePre <buffer> :%s/\s\+$//e

" *base* "

" Status line
set laststatus=2
set novisualbell

"Colorful life
set t_Co=256

" Set default encoding
set encoding=utf-8

" Hybrid relative numbers
set rnu
set nu

" Search
set incsearch
set hlsearch
nmap <leader>kh :noh<CR>

" Noisy shit
set noerrorbells
set novisualbell
set fileformats=unix,mac

" Whitespaces
set et
set ts=4
set sw=4
set sts=4
set listchars=tab:▸\ ,eol:¬
set list
nmap <leader>- :set list!<CR>

" No NERDTree because we can
nmap <leader>d :Explore<CR>

" Wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,*.class,.svn,vendor/gems/*
set wmnu

" Put swp files here
set backupdir=~/.vim/swp
set directory=~/.vim/swp

" *theme* "

syntax enable
set background=dark
colo Tomorrow-Night

" *airline* "

let g:airline_powerline_fonts=1

" *syntastic* "

let g:syntastic_error_symbol = '✗✗'
let g:syntastic_style_error_symbol = '✠✠'
let g:syntastic_warning_symbol = '∆∆'
let g:syntastic_style_warning_symbol = '≈≈'

" *ag* "

map <leader>ga :Ag

" *tagbar* "

map <leader>kt :TagbarToggle<CR>

" *slime* "

let g:slime_target = "tmux"
let g:slime_python_ipython = 1

" *fugitive* "

map <leader>ms :Gstatus<CR>
map <leader>mb :Gblame<CR>
map <leader>mc :Gcommit<CR>
map <leader>mm :Gmove<CR>
map <leader>mr :Gremove<CR>
map <leader>ml :Glog<CR>
map <leader>md :Gdiff<CR>
map <leader>mw :Gwrite<CR>

" *ycm* "

"let g:ycm_key_list_select_completion = ['<C-Tab>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-S-Tab>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<C-Tab>'
"let g:ycm_path_to_python_interpreter = '/usr/bin/python'
"nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>

" *jedi* "

"autocmd FileType python setlocal completeopt-=preview

" *ultisnips* "

let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" *emmet* "

imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" *unite* "

" Some bling and defaults
call unite#custom#profile('default', 'context', {
    \   'direction': 'botright',
    \   'prompt_direction': 'top',
    \   'prompt': '❯❯ ',
    \   'start_insert': 1
    \ })
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

" Fuzzy file finder
nmap <leader>f :Unite file_rec/async<CR>

if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column --hidden'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_rec_async_command= 'ag --follow --nocolor --nogroup --hidden -g ""'
endif

call unite#custom#source('file_rec/async',
    \ 'ignore_pattern', join([
    \ '\.git/',
    \ 'node_modules/',
    \ 'bower_components/',
    \ 'dist/',
    \ 'vendor/',
    \ '\.pyc',
    \ 'target/',
    \ '\.idea/',
    \ '\.idea_modules/',
    \ ], '\|'))

" Fuzzy line search
nmap <leader>/ :Unite line<CR>
call unite#custom#source('file,file/new,buffer,file_rec,line',
    \ 'matchers',
    \ 'matcher_fuzzy')

" Fuzzy buffer switcher
nmap <leader>e :Unite buffer<CR>

" *keys* "

nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-l> :wincmd l<CR>
nmap <silent> <C-h> :wincmd h<CR>

nmap <leader>s :w<CR>
nmap <leader>Q :qall!<CR>
